/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { WeddingService } from "../wedding.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { WeddingCreateInput } from "./WeddingCreateInput";
import { Wedding } from "./Wedding";
import { WeddingFindManyArgs } from "./WeddingFindManyArgs";
import { WeddingWhereUniqueInput } from "./WeddingWhereUniqueInput";
import { WeddingUpdateInput } from "./WeddingUpdateInput";
import { CulturalPracticeFindManyArgs } from "../../culturalPractice/base/CulturalPracticeFindManyArgs";
import { CulturalPractice } from "../../culturalPractice/base/CulturalPractice";
import { CulturalPracticeWhereUniqueInput } from "../../culturalPractice/base/CulturalPracticeWhereUniqueInput";
import { RegistrationFindManyArgs } from "../../registration/base/RegistrationFindManyArgs";
import { Registration } from "../../registration/base/Registration";
import { RegistrationWhereUniqueInput } from "../../registration/base/RegistrationWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class WeddingControllerBase {
  constructor(
    protected readonly service: WeddingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Wedding })
  @nestAccessControl.UseRoles({
    resource: "Wedding",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createWedding(
    @common.Body() data: WeddingCreateInput
  ): Promise<Wedding> {
    return await this.service.createWedding({
      data: data,
      select: {
        createdAt: true,
        date: true,
        description: true,
        host: true,
        id: true,
        location: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Wedding] })
  @ApiNestedQuery(WeddingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Wedding",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async weddings(@common.Req() request: Request): Promise<Wedding[]> {
    const args = plainToClass(WeddingFindManyArgs, request.query);
    return this.service.weddings({
      ...args,
      select: {
        createdAt: true,
        date: true,
        description: true,
        host: true,
        id: true,
        location: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Wedding })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Wedding",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async wedding(
    @common.Param() params: WeddingWhereUniqueInput
  ): Promise<Wedding | null> {
    const result = await this.service.wedding({
      where: params,
      select: {
        createdAt: true,
        date: true,
        description: true,
        host: true,
        id: true,
        location: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Wedding })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Wedding",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateWedding(
    @common.Param() params: WeddingWhereUniqueInput,
    @common.Body() data: WeddingUpdateInput
  ): Promise<Wedding | null> {
    try {
      return await this.service.updateWedding({
        where: params,
        data: data,
        select: {
          createdAt: true,
          date: true,
          description: true,
          host: true,
          id: true,
          location: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Wedding })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Wedding",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteWedding(
    @common.Param() params: WeddingWhereUniqueInput
  ): Promise<Wedding | null> {
    try {
      return await this.service.deleteWedding({
        where: params,
        select: {
          createdAt: true,
          date: true,
          description: true,
          host: true,
          id: true,
          location: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/culturalPractices")
  @ApiNestedQuery(CulturalPracticeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CulturalPractice",
    action: "read",
    possession: "any",
  })
  async findCulturalPractices(
    @common.Req() request: Request,
    @common.Param() params: WeddingWhereUniqueInput
  ): Promise<CulturalPractice[]> {
    const query = plainToClass(CulturalPracticeFindManyArgs, request.query);
    const results = await this.service.findCulturalPractices(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,

        wedding: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/culturalPractices")
  @nestAccessControl.UseRoles({
    resource: "Wedding",
    action: "update",
    possession: "any",
  })
  async connectCulturalPractices(
    @common.Param() params: WeddingWhereUniqueInput,
    @common.Body() body: CulturalPracticeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      culturalPractices: {
        connect: body,
      },
    };
    await this.service.updateWedding({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/culturalPractices")
  @nestAccessControl.UseRoles({
    resource: "Wedding",
    action: "update",
    possession: "any",
  })
  async updateCulturalPractices(
    @common.Param() params: WeddingWhereUniqueInput,
    @common.Body() body: CulturalPracticeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      culturalPractices: {
        set: body,
      },
    };
    await this.service.updateWedding({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/culturalPractices")
  @nestAccessControl.UseRoles({
    resource: "Wedding",
    action: "update",
    possession: "any",
  })
  async disconnectCulturalPractices(
    @common.Param() params: WeddingWhereUniqueInput,
    @common.Body() body: CulturalPracticeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      culturalPractices: {
        disconnect: body,
      },
    };
    await this.service.updateWedding({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/registrations")
  @ApiNestedQuery(RegistrationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Registration",
    action: "read",
    possession: "any",
  })
  async findRegistrations(
    @common.Req() request: Request,
    @common.Param() params: WeddingWhereUniqueInput
  ): Promise<Registration[]> {
    const query = plainToClass(RegistrationFindManyArgs, request.query);
    const results = await this.service.findRegistrations(params.id, {
      ...query,
      select: {
        attendee: true,
        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,

        wedding: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/registrations")
  @nestAccessControl.UseRoles({
    resource: "Wedding",
    action: "update",
    possession: "any",
  })
  async connectRegistrations(
    @common.Param() params: WeddingWhereUniqueInput,
    @common.Body() body: RegistrationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      registrations: {
        connect: body,
      },
    };
    await this.service.updateWedding({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/registrations")
  @nestAccessControl.UseRoles({
    resource: "Wedding",
    action: "update",
    possession: "any",
  })
  async updateRegistrations(
    @common.Param() params: WeddingWhereUniqueInput,
    @common.Body() body: RegistrationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      registrations: {
        set: body,
      },
    };
    await this.service.updateWedding({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/registrations")
  @nestAccessControl.UseRoles({
    resource: "Wedding",
    action: "update",
    possession: "any",
  })
  async disconnectRegistrations(
    @common.Param() params: WeddingWhereUniqueInput,
    @common.Body() body: RegistrationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      registrations: {
        disconnect: body,
      },
    };
    await this.service.updateWedding({
      where: params,
      data,
      select: { id: true },
    });
  }
}

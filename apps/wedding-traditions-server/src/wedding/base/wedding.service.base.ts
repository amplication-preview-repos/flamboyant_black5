/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Wedding as PrismaWedding,
  CulturalPractice as PrismaCulturalPractice,
  Registration as PrismaRegistration,
} from "@prisma/client";

export class WeddingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.WeddingCountArgs, "select">): Promise<number> {
    return this.prisma.wedding.count(args);
  }

  async weddings(args: Prisma.WeddingFindManyArgs): Promise<PrismaWedding[]> {
    return this.prisma.wedding.findMany(args);
  }
  async wedding(
    args: Prisma.WeddingFindUniqueArgs
  ): Promise<PrismaWedding | null> {
    return this.prisma.wedding.findUnique(args);
  }
  async createWedding(args: Prisma.WeddingCreateArgs): Promise<PrismaWedding> {
    return this.prisma.wedding.create(args);
  }
  async updateWedding(args: Prisma.WeddingUpdateArgs): Promise<PrismaWedding> {
    return this.prisma.wedding.update(args);
  }
  async deleteWedding(args: Prisma.WeddingDeleteArgs): Promise<PrismaWedding> {
    return this.prisma.wedding.delete(args);
  }

  async findCulturalPractices(
    parentId: string,
    args: Prisma.CulturalPracticeFindManyArgs
  ): Promise<PrismaCulturalPractice[]> {
    return this.prisma.wedding
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .culturalPractices(args);
  }

  async findRegistrations(
    parentId: string,
    args: Prisma.RegistrationFindManyArgs
  ): Promise<PrismaRegistration[]> {
    return this.prisma.wedding
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .registrations(args);
  }
}

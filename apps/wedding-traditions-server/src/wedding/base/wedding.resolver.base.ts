/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Wedding } from "./Wedding";
import { WeddingCountArgs } from "./WeddingCountArgs";
import { WeddingFindManyArgs } from "./WeddingFindManyArgs";
import { WeddingFindUniqueArgs } from "./WeddingFindUniqueArgs";
import { CreateWeddingArgs } from "./CreateWeddingArgs";
import { UpdateWeddingArgs } from "./UpdateWeddingArgs";
import { DeleteWeddingArgs } from "./DeleteWeddingArgs";
import { CulturalPracticeFindManyArgs } from "../../culturalPractice/base/CulturalPracticeFindManyArgs";
import { CulturalPractice } from "../../culturalPractice/base/CulturalPractice";
import { RegistrationFindManyArgs } from "../../registration/base/RegistrationFindManyArgs";
import { Registration } from "../../registration/base/Registration";
import { WeddingService } from "../wedding.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Wedding)
export class WeddingResolverBase {
  constructor(
    protected readonly service: WeddingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Wedding",
    action: "read",
    possession: "any",
  })
  async _weddingsMeta(
    @graphql.Args() args: WeddingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Wedding])
  @nestAccessControl.UseRoles({
    resource: "Wedding",
    action: "read",
    possession: "any",
  })
  async weddings(
    @graphql.Args() args: WeddingFindManyArgs
  ): Promise<Wedding[]> {
    return this.service.weddings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Wedding, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Wedding",
    action: "read",
    possession: "own",
  })
  async wedding(
    @graphql.Args() args: WeddingFindUniqueArgs
  ): Promise<Wedding | null> {
    const result = await this.service.wedding(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Wedding)
  @nestAccessControl.UseRoles({
    resource: "Wedding",
    action: "create",
    possession: "any",
  })
  async createWedding(
    @graphql.Args() args: CreateWeddingArgs
  ): Promise<Wedding> {
    return await this.service.createWedding({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Wedding)
  @nestAccessControl.UseRoles({
    resource: "Wedding",
    action: "update",
    possession: "any",
  })
  async updateWedding(
    @graphql.Args() args: UpdateWeddingArgs
  ): Promise<Wedding | null> {
    try {
      return await this.service.updateWedding({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Wedding)
  @nestAccessControl.UseRoles({
    resource: "Wedding",
    action: "delete",
    possession: "any",
  })
  async deleteWedding(
    @graphql.Args() args: DeleteWeddingArgs
  ): Promise<Wedding | null> {
    try {
      return await this.service.deleteWedding(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [CulturalPractice], { name: "culturalPractices" })
  @nestAccessControl.UseRoles({
    resource: "CulturalPractice",
    action: "read",
    possession: "any",
  })
  async findCulturalPractices(
    @graphql.Parent() parent: Wedding,
    @graphql.Args() args: CulturalPracticeFindManyArgs
  ): Promise<CulturalPractice[]> {
    const results = await this.service.findCulturalPractices(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Registration], { name: "registrations" })
  @nestAccessControl.UseRoles({
    resource: "Registration",
    action: "read",
    possession: "any",
  })
  async findRegistrations(
    @graphql.Parent() parent: Wedding,
    @graphql.Args() args: RegistrationFindManyArgs
  ): Promise<Registration[]> {
    const results = await this.service.findRegistrations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}

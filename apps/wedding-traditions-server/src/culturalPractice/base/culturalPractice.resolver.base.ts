/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CulturalPractice } from "./CulturalPractice";
import { CulturalPracticeCountArgs } from "./CulturalPracticeCountArgs";
import { CulturalPracticeFindManyArgs } from "./CulturalPracticeFindManyArgs";
import { CulturalPracticeFindUniqueArgs } from "./CulturalPracticeFindUniqueArgs";
import { CreateCulturalPracticeArgs } from "./CreateCulturalPracticeArgs";
import { UpdateCulturalPracticeArgs } from "./UpdateCulturalPracticeArgs";
import { DeleteCulturalPracticeArgs } from "./DeleteCulturalPracticeArgs";
import { Wedding } from "../../wedding/base/Wedding";
import { CulturalPracticeService } from "../culturalPractice.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CulturalPractice)
export class CulturalPracticeResolverBase {
  constructor(
    protected readonly service: CulturalPracticeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CulturalPractice",
    action: "read",
    possession: "any",
  })
  async _culturalPracticesMeta(
    @graphql.Args() args: CulturalPracticeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CulturalPractice])
  @nestAccessControl.UseRoles({
    resource: "CulturalPractice",
    action: "read",
    possession: "any",
  })
  async culturalPractices(
    @graphql.Args() args: CulturalPracticeFindManyArgs
  ): Promise<CulturalPractice[]> {
    return this.service.culturalPractices(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CulturalPractice, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CulturalPractice",
    action: "read",
    possession: "own",
  })
  async culturalPractice(
    @graphql.Args() args: CulturalPracticeFindUniqueArgs
  ): Promise<CulturalPractice | null> {
    const result = await this.service.culturalPractice(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CulturalPractice)
  @nestAccessControl.UseRoles({
    resource: "CulturalPractice",
    action: "create",
    possession: "any",
  })
  async createCulturalPractice(
    @graphql.Args() args: CreateCulturalPracticeArgs
  ): Promise<CulturalPractice> {
    return await this.service.createCulturalPractice({
      ...args,
      data: {
        ...args.data,

        wedding: args.data.wedding
          ? {
              connect: args.data.wedding,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CulturalPractice)
  @nestAccessControl.UseRoles({
    resource: "CulturalPractice",
    action: "update",
    possession: "any",
  })
  async updateCulturalPractice(
    @graphql.Args() args: UpdateCulturalPracticeArgs
  ): Promise<CulturalPractice | null> {
    try {
      return await this.service.updateCulturalPractice({
        ...args,
        data: {
          ...args.data,

          wedding: args.data.wedding
            ? {
                connect: args.data.wedding,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CulturalPractice)
  @nestAccessControl.UseRoles({
    resource: "CulturalPractice",
    action: "delete",
    possession: "any",
  })
  async deleteCulturalPractice(
    @graphql.Args() args: DeleteCulturalPracticeArgs
  ): Promise<CulturalPractice | null> {
    try {
      return await this.service.deleteCulturalPractice(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Wedding, {
    nullable: true,
    name: "wedding",
  })
  @nestAccessControl.UseRoles({
    resource: "Wedding",
    action: "read",
    possession: "any",
  })
  async getWedding(
    @graphql.Parent() parent: CulturalPractice
  ): Promise<Wedding | null> {
    const result = await this.service.getWedding(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CulturalPractice as PrismaCulturalPractice,
  Wedding as PrismaWedding,
} from "@prisma/client";

export class CulturalPracticeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CulturalPracticeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.culturalPractice.count(args);
  }

  async culturalPractices(
    args: Prisma.CulturalPracticeFindManyArgs
  ): Promise<PrismaCulturalPractice[]> {
    return this.prisma.culturalPractice.findMany(args);
  }
  async culturalPractice(
    args: Prisma.CulturalPracticeFindUniqueArgs
  ): Promise<PrismaCulturalPractice | null> {
    return this.prisma.culturalPractice.findUnique(args);
  }
  async createCulturalPractice(
    args: Prisma.CulturalPracticeCreateArgs
  ): Promise<PrismaCulturalPractice> {
    return this.prisma.culturalPractice.create(args);
  }
  async updateCulturalPractice(
    args: Prisma.CulturalPracticeUpdateArgs
  ): Promise<PrismaCulturalPractice> {
    return this.prisma.culturalPractice.update(args);
  }
  async deleteCulturalPractice(
    args: Prisma.CulturalPracticeDeleteArgs
  ): Promise<PrismaCulturalPractice> {
    return this.prisma.culturalPractice.delete(args);
  }

  async getWedding(parentId: string): Promise<PrismaWedding | null> {
    return this.prisma.culturalPractice
      .findUnique({
        where: { id: parentId },
      })
      .wedding();
  }
}
